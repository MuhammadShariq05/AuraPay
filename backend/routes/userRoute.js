const express = require("express");
const zod = require("zod");
const { User, Account } = require("../db");
const { JWT_SECRET } = require("../config");
const jwt = require("jsonwebtoken"); 
const  { authMiddleware } = require("../middleware");
const userRoute = express.Router();


// userRoute.use("/update", updateUser)

const signupSchema = zod.object({
  username: zod.string(),
  password: zod.string(),
  firstName: zod.string(),
  lastName: zod.string()
})

// Sign up
userRoute.post("/signup", async (req, res) => {
  const {success} = signupSchema.safeParse(req.body);
  if(!success){
    res.status(411).json({
      messege: "Email already taken / Incorrect inputs"
    })
  }

  const existingUser = await User.findOne({
    username: req.body.username
  })

  if(existingUser){
    res.status(411).json({
      messege: "Email already exist"
    })
  }

  await Account.create({
    userId,
    balance: 1 + Math.random() * 10000
  })

  const user = await User.create({
    username: req.body.username,
    password: req.body.password,
    firstName: req.body.firstName,
    lastName: req.body.lastName,
  })

// the unique user ID (`_id`) is typically generated by the database when a new user record is created.
  const userId = user._id;

// jwt.sign({ userId }, JWT_SECRET) creates a JWT. The payload of the token is an object containing the userId.
  const token = jwt.sign({
    userId
  }, JWT_SECRET);
  res.json({
    messege: "User created successfully",
    token: token
  })
})


const signinSchema = zod.object({
  username: zod.string().email(),
  password: zod.string()
})

userRoute.post("/signin", async (req, res) => {
  const {success} = signinSchema.safeParse(req.body);
  if(!success){
    res.status(411).json({
      messege: "Incorrect Inputs"
    })
  }

  const user = await findOne({
    username: req.body.username,
    password: req.body.password
  });

  if(user){
    const token = jwt.sign({
      userId: user._id
    }, JWT_SECRET);

    res.json({
      token: token
    })
    return;
  }

  res.status(411).json({
    messege: "Error while logging in"
  })
})

// Update route
const updateBody = zod.object({
	password: zod.string().optional(),
    firstName: zod.string().optional(),
    lastName: zod.string().optional(),
})

router.put("/", authMiddleware, async (req, res) => {
    const { success } = updateBody.safeParse(req.body)
    if (!success) {
        res.status(411).json({
            message: "Error while updating information"
        })
    }

		await User.updateOne({ _id: req.userId }, req.body);
	
    res.json({
        message: "Updated successfully"
    })
})

// Get users from backend
router.get("/bulk", async (req, res)=>{

  const filter = req.query.filter || "";
  const users = await User.find({
    $or: [{
      firstName: {
        "$regex" : filter
      }
    },{
      lastName: {
        "$regex" : filter
      }
    }]
  })
  
  res.json({
      user: users.map(user => ({
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
          _id: user._id
      }))
  })
})

module.exports = {
  router
}